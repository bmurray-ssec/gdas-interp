import math
import numpy as np

nl = 101
ns = 2
nz = 3
tlat = [15.0, 40.0, 65.0]
ozmr = np.zeros((nl, nz, ns));

pp =          [0.0050,    0.0161,    0.0384,    0.0769,    0.1370, \
    0.2244,    0.3454,    0.5064,    0.7140,    0.9753,    1.2972, \
    1.6872,    2.1526,    2.7009,    3.3398,    4.0770,    4.9204, \
    5.8776,    6.9567,    8.1655,    9.5119,   11.0038,   12.6492, \
   14.4559,   16.4318,   18.5847,   20.9224,   23.4526,   26.1829, \
   29.1210,   32.2744,   35.6505,   39.2566,   43.1001,   47.1882, \
   51.5278,   56.1260,   60.9895,   66.1253,   71.5398,   77.2396, \
   83.2310,   89.5204,   96.1138,  103.0172,  110.2366,  117.7775, \
  125.6456,  133.8462,  142.3848,  151.2664,  160.4959,  170.0784, \
  180.0183,  190.3203,  200.9887,  212.0277,  223.4415,  235.2338, \
  247.4085,  259.9691,  272.9191,  286.2617,  300.0000,  314.1369, \
  328.6753,  343.6176,  358.9665,  374.7241,  390.8926,  407.4738, \
  424.4698,  441.8819,  459.7118,  477.9607,  496.6298,  515.7200, \
  535.2322,  555.1669,  575.5248,  596.3062,  617.5112,  639.1398, \
  661.1920,  683.6673,  706.5654,  729.8857,  753.6275,  777.7897, \
  802.3714,  827.3713,  852.7880,  878.6201,  904.8659,  931.5236, \
  958.5911,  986.0666, 1013.9476, 1042.2319, 1070.9170, 1100.0000]

#     Define stratospheric interpolation points (pressure levels).
plev = len(pp)
strat_top = 20
strat_bot = 44
gdaspp = [18, 20, 26, 29, 35, 39, 44, 46]

#     TROPICAL

ozmr[:,0,0] = [0.47628,0.26429,0.26278,0.45250,0.75116, \
    1.10347,1.55742,1.96852,2.55758,3.09206,3.88655,4.78962,5.83901, \
    6.91912,7.84273,8.61191,9.17298,9.48285,9.75589,9.69629,9.62726, \
    9.33416,8.94015,8.56266,7.99507,7.36964,6.70970,5.98273,5.25233, \
    4.50810,3.92803,3.42163,2.93116,2.45571,1.99446,1.62320,1.40553, \
    1.19122,0.97212,0.77005,0.60182,0.43786,0.33360,0.25389,0.19479, \
    0.16141,0.13792,0.13077,0.12378,0.11626,0.10909,0.10378,0.09858, \
    0.09349,0.08850,0.08364,0.07914,0.07473,0.07041,0.06617,0.06285, \
    0.05982,0.05684,0.05392,0.05204,0.05020,0.04839,0.04689,0.04561, \
    0.04435,0.04332,0.04256,0.04183,0.04111,0.04041,0.03973,0.03908, \
    0.03844,0.03780,0.03719,0.03660,0.03602,0.03571,0.03544,0.03525, \
    0.03503,0.03464,0.03426,0.03388,0.03341,0.03294,0.03246,0.03191, \
    0.03137,0.03076,0.03005,0.02935,0.02867,0.02798,0.02780,0.02780]

#     MIDLATITUDE WINTER

ozmr[:,1,0] = [0.51382,0.24549,0.31340,0.49141,0.80263, \
    1.21291,1.76263,2.26416,3.07810,3.81664,4.71840,5.60591,6.36097, \
    6.82852,7.09197,7.16580,7.11413,6.99021,6.86566,6.61458,6.37030, \
    6.15518,5.95848,5.77003,5.60211,5.44577,5.28917,5.12866,4.92166, \
    4.65215,4.37542,4.10128,3.83576,3.57837,3.32867,3.05455,2.72902, \
    2.41998,2.14892,1.89915,1.69178,1.48968,1.33095,1.19127,1.07451, \
    0.98597,0.91318,0.86575,0.81938,0.78001,0.73926,0.68011,0.62221, \
    0.56549,0.50992,0.45592,0.40760,0.36020,0.31372,0.26811,0.23664, \
    0.20922,0.18231,0.15587,0.13995,0.12431,0.10893,0.09822,0.09083, \
    0.08356,0.07689,0.07090,0.06551,0.06044,0.05575,0.05266,0.04953, \
    0.04644,0.04340,0.04050,0.03794,0.03542,0.03428,0.03334,0.03241, \
    0.03151,0.03063,0.02976,0.02891,0.02863,0.02840,0.02820,0.02811, \
    0.02801,0.02794,0.02788,0.02783,0.02779,0.02774,0.02773,0.02773]

#     SUBARCTIC WINTER

ozmr[:,2,0] = [0.66449,0.26978,0.48593,0.67688,0.95783, \
    1.35182,1.91218,2.41775,3.09378,3.70718,4.53368,5.24354,5.74008, \
    6.04019,6.19492,6.21557,6.15697,6.02288,5.88833,5.68564,5.48967, \
    5.30404,5.12722,4.95782,4.86320,4.79873,4.73519,4.67163,4.60720, \
    4.54084,4.40541,4.24629,4.09218,3.94278,3.79785,3.59108,3.26675, \
    2.94742,2.62079,2.32052,2.07317,1.83210,1.64421,1.47960,1.33092, \
    1.20137,1.07704,0.95937,0.84432,0.74373,0.65183,0.59004,0.52954, \
    0.47028,0.41223,0.35871,0.33964,0.32094,0.30259,0.28460,0.25715, \
    0.22765,0.19868,0.17023,0.14697,0.12411,0.10165,0.08725,0.07858, \
    0.07006,0.06190,0.05415,0.04896,0.04499,0.04143,0.03971,0.03815, \
    0.03665,0.03516,0.03373,0.03241,0.03110,0.02987,0.02866,0.02752, \
    0.02643,0.02540,0.02439,0.02339,0.02274,0.02213,0.02152,0.02092, \
    0.02033,0.01973,0.01915,0.01857,0.01800,0.01744,0.01729,0.01729]

#     TROPICAL ... identical to ozmr[:,1,1], repeated for symmetry

ozmr[:,0,1] = [0.47628,0.26429,0.26278,0.45250,0.75116, \
    1.10347,1.55742,1.96852,2.55758,3.09206,3.88655,4.78962,5.83901, \
    6.91912,7.84273,8.61191,9.17298,9.48285,9.75589,9.69629,9.62726, \
    9.33416,8.94015,8.56266,7.99507,7.36964,6.70970,5.98273,5.25233, \
    4.50810,3.92803,3.42163,2.93116,2.45571,1.99446,1.62320,1.40553, \
    1.19122,0.97212,0.77005,0.60182,0.43786,0.33360,0.25389,0.19479, \
    0.16141,0.13792,0.13077,0.12378,0.11626,0.10909,0.10378,0.09858, \
    0.09349,0.08850,0.08364,0.07914,0.07473,0.07041,0.06617,0.06285, \
    0.05982,0.05684,0.05392,0.05204,0.05020,0.04839,0.04689,0.04561, \
    0.04435,0.04332,0.04256,0.04183,0.04111,0.04041,0.03973,0.03908, \
    0.03844,0.03780,0.03719,0.03660,0.03602,0.03571,0.03544,0.03525, \
    0.03503,0.03464,0.03426,0.03388,0.03341,0.03294,0.03246,0.03191, \
    0.03137,0.03076,0.03005,0.02935,0.02867,0.02798,0.02780,0.02780]

#     MIDLATITUDE SUMMER

ozmr[:,1,1] = [0.52876,0.21784,0.28626,0.50723,0.82434, \
    1.15971,1.49190,1.79766,2.36209,2.87423,3.60218,4.42858,5.42260, \
    6.51285,7.45312,8.23323,8.70375,8.74203,8.74005,8.36522,7.99382, \
    7.58434,7.16521,6.76365,6.39723,6.05246,5.70201,5.33505,4.93858, \
    4.49900,4.10257,3.73019,3.36953,3.01991,2.68074,2.38304,2.15283, \
    1.92043,1.66023,1.41371,1.19088,0.97372,0.83431,0.72694,0.64802, \
    0.60467,0.56397,0.52707,0.49100,0.46648,0.44137,0.39970,0.35890, \
    0.31893,0.27978,0.24321,0.22521,0.20755,0.19024,0.17325,0.15940, \
    0.14655,0.13393,0.12153,0.11510,0.10879,0.10258,0.09697,0.09181, \
    0.08674,0.08211,0.07799,0.07393,0.06992,0.06608,0.06282,0.06019, \
    0.05773,0.05530,0.05302,0.05107,0.04914,0.04740,0.04571,0.04406, \
    0.04250,0.04107,0.03966,0.03827,0.03717,0.03611,0.03507,0.03419, \
    0.03332,0.03248,0.03169,0.03092,0.03015,0.02939,0.02918,0.02918]

#     SUBARCTIC SUMMER

ozmr[:,2,1] = [0.60245,0.21936,0.27680,0.48346,0.76740, \
    1.06602,1.37644,1.65892,2.09879,2.49791,3.19647,3.97613,4.89203, \
    5.89915,6.74986,7.42939,7.75508,7.68046,7.57369,7.19015,6.81393, \
    6.42741,6.04403,5.67673,5.46090,5.30670,5.11691,4.86912,4.63322, \
    4.40961,4.11937,3.80935,3.50909,3.21802,2.93565,2.63975,2.31163, \
    2.01203,1.79760,1.59367,1.40729,1.22565,1.09532,0.98670,0.89692, \
    0.83042,0.76869,0.71395,0.66044,0.61732,0.57697,0.53986,0.50352, \
    0.46793,0.43306,0.39843,0.35992,0.32216,0.28512,0.24878,0.22238, \
    0.19888,0.17580,0.15314,0.13730,0.12173,0.10643,0.09639,0.09009, \
    0.08390,0.07884,0.07512,0.07161,0.06823,0.06486,0.06128,0.05810, \
    0.05504,0.05203,0.04924,0.04697,0.04474,0.04308,0.04151,0.03996, \
    0.03849,0.03717,0.03586,0.03458,0.03342,0.03229,0.03116,0.03001, \
    0.02887,0.02768,0.02642,0.02518,0.02395,0.02274,0.02241,0.02241]


def _time_interp(rlat, month, omr):
    omix = np.zeros((nl))
    nmon = month
    if rlat < 0:
        nmon += 6
    if nmon > 12:
        nmon -= 12

    imon = abs(nmon - 7)
    wt1 = float(imon) / 6.0
    wt2 = 1.0 - wt1
    for i in xrange(nl):
        omix[i] = wt1*omr[i,0] + wt2*omr[i,1]
    return omix

def clozo101(rlat, month):
    omr  = np.zeros((nl, ns))
    omix = np.zeros((nl))
    alat = abs(rlat)

    # If we are in a tropical zone, no spatial or temporal interpolation needs 
    # to be done. Simply get the tropical profile and return it.
    if alat <= 15:
        for i in xrange(nl):
            omix[i] = ozmr(i, 1, 1)
        return omix

    # If we are firmly in a subarctic zone, get the summer and winter profiles
    # and interpolate between them based on the month given.
    elif alat >= 65:
        jl = 3
        kk = 2
        for k in xrange(kk):
            for i in xrange(nl):
                omr[i, k] = ozmr[i, jl, k]
        
        omix = _time_interp(rlat, month, omr)
        return omix
             
    # Otherwise, need to perform both temporal and spatial interpolation
    else:
        jl1 = 0
        if alat > 40:
            jl1 = 1
        jl2 = jl1 + 1

        # do spatial interpolation
        wt1 = (tlat[jl2] - alat) / 25.0 # ensures 0 <= wt1 <= 1
        wt2 = 1.0 - wt1
        for k in range(ns):
            for i in range(nl):
                or1 = ozmr[i, jl1, k]
                or2 = ozmr[i, jl2, k]
                omr[i, k] = wt1*or1 + wt2*or2

        # do temporal interpolation
        omix = _time_interp(rlat, month, omr)
        return omix

def adjo3(ozone, gdas_prof):
    adj_ozone = np.zeros((plev))

    for kk in range(plev):
        adj_ozone[kk] = ozone[kk]

    adj_ozone[20] = gdas_prof[0][1]
    adj_ozone[26] = gdas_prof[1][1]
    adj_ozone[29] = gdas_prof[2][1]
    adj_ozone[35] = gdas_prof[3][1]
    adj_ozone[39] = gdas_prof[4][1]
    adj_ozone[44] = gdas_prof[5][1]
    
    levc = 1
    intpt = 0
    toplev = strat_top - 2
    botlev = strat_bot + 2
    
    for kk in range(toplev, botlev + 1):

        if gdaspp[levc] == kk:
            do3 = adj_ozone[gdaspp[levc]] - adj_ozone[gdaspp[intpt]]
            dptot = math.log(pp[gdaspp[levc]]) - math.log(pp[gdaspp[intpt]])

            m = gdaspp[intpt] + 1
            n = gdaspp[levc] - 1
            for jj in range(m, n + 1):
                dp = math.log(pp[jj]) - math.log(pp[gdaspp[intpt]])
                adj_ozone[jj] = adj_ozone[gdaspp[intpt]] + (do3 * (dp / dptot))

            levc += 1
            intpt += 1
                
    return adj_ozone
